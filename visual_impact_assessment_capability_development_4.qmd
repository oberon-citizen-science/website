---
title: "Visual Impact Assessment capability development - phase 4"
---

::: {.callout-warning}
The viewshed maps on this page are very detailed and may take quite a while to display in many web browsers, and may not render at all on small devices such as smartphones or tablets. They are provided purely for development purposes, and final versions will be optimised for faster display.
:::

## Calculating compound viewsheds

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
#| echo: false
#| message: false
#| warning: false
#| include: false

library(tidyverse)
library(leaflet)
library(RColorBrewer)
library(terra)
library(terrainr)
library(raster)
library(osmdata)
library(sf)

terraOptions(progress=0)

if (!file.exists("_wip/oberon_and_environs_dem_5m.tif")) {

  # NSW Elevation Data Service
  # https://portal.spatial.nsw.gov.au/portal/apps/webappviewer/index.html?id=437c0697e6524d8ebf10ad0d915bc219
  
wallerawang_rast <- terra::rast("~/NSW_Government_Spatial_Services/Wallerawang-DEM-AHD_56_5m/Wallerawang-DEM-AHD_56_5m.asc")
orange_rast <- terra::rast("~/NSW_Government_Spatial_Services/Orange-DEM-AHD_55_5m/Orange-DEM-AHD_55_5m.asc")
bathurst_rast <- terra::rast("~/NSW_Government_Spatial_Services/Bathurst-DEM-AHD_55_5m/Bathurst-DEM-AHD_55_5m.asc")
blayney_rast <- terra::rast("~/NSW_Government_Spatial_Services/Blayney-DEM-AHD_55_5m/Blayney-DEM-AHD_55_5m.asc")
oberon_rast <- terra::rast("~/NSW_Government_Spatial_Services/Oberon-DEM-AHD_55_5m/Oberon-DEM-AHD_55_5m.asc")
crookwell_rast <- terra::rast("~/NSW_Government_Spatial_Services/Crookwell-DEM-AHD_55_5m/Crookwell-DEM-AHD_55_5m.asc")
katoomba_rast <- terra::rast("~/NSW_Government_Spatial_Services/Katoomba-DEM-AHD_56_5m/Katoomba-DEM-AHD_56_5m.asc")
taralga_rast <- terra::rast("~/NSW_Government_Spatial_Services/Taralga-DEM-AHD_55_5m/Taralga-DEM-AHD_55_5m.asc")
burragorang_rast <- terra::rast("~/NSW_Government_Spatial_Services/Burragorang-DEM-AHD_56_5m/Burragorang-DEM-AHD_56_5m.asc")

terra::writeRaster(wallerawang_rast, "_wip/wallerawang_dem.tif", overwrite=TRUE)
terra::writeRaster(orange_rast, "_wip/orange_dem.tif", overwrite=TRUE)
terra::writeRaster(bathurst_rast, "_wip/bathurst_dem.tif", overwrite=TRUE)
terra::writeRaster(blayney_rast, "_wip/blayney_dem.tif", overwrite=TRUE)
terra::writeRaster(oberon_rast, "_wip/oberon_dem.tif", overwrite=TRUE)
terra::writeRaster(crookwell_rast, "_wip/crookwell_dem.tif", overwrite=TRUE)
terra::writeRaster(katoomba_rast, "_wip/katoomba_dem.tif", overwrite=TRUE)
terra::writeRaster(taralga_rast, "_wip/taralga_dem.tif", overwrite=TRUE)
terra::writeRaster(burragorang_rast, "_wip/burragorang_dem.tif", overwrite=TRUE)

rm(wallerawang_rast)
rm(orange_rast)
rm(bathurst_rast)
rm(blayney_rast)
rm(oberon_rast)
rm(crookwell_rast)
rm(katoomba_rast)
rm(taralga_rast)
rm(burragorang_rast)

terrainr::merge_rasters(
  c("_wip/wallerawang_dem.tif",
    "_wip/orange_dem.tif",
    "_wip/bathurst_dem.tif",
    "_wip/blayney_dem.tif",
    "_wip/oberon_dem.tif",
    "_wip/crookwell_dem.tif",
    "_wip/katoomba_dem.tif",
    "_wip/taralga_dem.tif",
    "_wip/burragorang_dem.tif"),
   output_raster = "_wip/oberon_and_environs_dem_5m.tif",
  overwrite=TRUE)
}

localtif <- terra::rast("_wip/oberon_and_environs_dem_5m.tif")  

palings_yard_turbines_untransformed_sf <- sf::read_sf("assets/paling_yards_turbines.geojson")
palings_yard_turbines_sf <- st_transform(palings_yard_turbines_untransformed_sf, crs=crs(localtif))
palings_yard_turbines_df <- as.data.frame(st_coordinates(palings_yard_turbines_sf))

palings_yard_turbines_untransformed_df <- as.data.frame(st_coordinates(palings_yard_turbines_untransformed_sf)) %>%
  rename(long=X, lat = Y)

if (!file.exists("_wip/distance_extent.rds")) {

  # first get the extents of 32,201m buffers around each turbine and get union of them all
  for (i in 1:nrow(palings_yard_turbines_untransformed_sf)) {
    current_turbine <- vect(cbind(st_coordinates(palings_yard_turbines_sf[i,])),
                                crs=crs(localtif))
    turbine_distance <- distance(localtif, current_turbine)
    # set distance to NA if beyond 32,200m and trim to that
    turbine_distance <- trim(ifel(turbine_distance <= 32201, 1, NA))
    # get extent
    if (i == 1) {
      distance_extent <- ext(turbine_distance)
    } else {
      distance_extent <- union(distance_extent, ext(turbine_distance))
    }
    rm(turbine_distance)
    gc(verbose=TRUE, full=TRUE)
    print(i)
    print(distance_extent)
  }
  saveRDS(as.vector(distance_extent), "_wip/distance_extent.rds")
} else {
  distance_extent <- ext(readRDS("_wip/distance_extent.rds"))
}

# Now create the summed viewsheds for all 47 turbines in Palings Yard
turbine_visible_exposure_heights <- c(170.5, 101.5, 32.5)
exposure_scores <- c(10, 20, 30)
precalculated_files <- all(file.exist(paste0("_wip/vshed_visual_exp_", 1:47, ".tif")))
if (!precalculated_files) {
  for (i in 1:nrow(palings_yard_turbines_untransformed_sf)) {
    current_turbine <- vect(cbind(st_coordinates(palings_yard_turbines_sf[i,])),
                                crs=crs(localtif))
    # loop over the three exposure values
    for (j in 1:3) {
      print(i)
      print(j)
      observer_ht <- turbine_visible_exposure_heights[j]
      vshed_raster <- viewshed(x=localtif,
                             loc=c(st_coordinates(palings_yard_turbines_sf[i,])), 
                             observer=observer_ht,
                             target=1.5,
                             curvcoef=0.85714,
                             output="yes/no")
      # reclassify binary (0,1) visibility to exposure scores
      vshed_raster <- classify(vshed_raster, cbind(1, exposure_scores[j]))
      # if first exposure level, first create a categorised distance layer
      if (j == 1) {
        distance_layer <- distance(vshed_raster, current_turbine)
        m <-  c(0, 800, 1,
                800, 3200, 2,
                3200, 8000, 3,
                8000, 16100, 4,
                16100, 32201, 5)
        rclmat <- matrix(m, ncol=3, byrow=TRUE)
        dist_for_turbine <- classify(distance_layer, rclmat,
                        others = NA,
                        include.lowest=TRUE,
                        right=TRUE)
        dist_for_turbine <- crop(dist_for_turbine, distance_extent)
        vshed_for_turbine <- crop(vshed_raster, distance_extent)
        # name the layer
        set.names(vshed_for_turbine, j, nlyr(vshed_for_turbine))
        rm(vshed_raster)
        gc(verbose=TRUE, full=TRUE)
      } else {
        vshed_for_turbine <- c(vshed_for_turbine, crop(vshed_raster, dist_for_turbine))
        # name the layer
        set.names(vshed_for_turbine, j, nlyr(vshed_for_turbine))
        rm(vshed_raster)
        gc(verbose=TRUE, full=TRUE)
        
      }
    }  
    # Now get maximum exposure value at each point in raster
    vshed_max_exp <- max(vshed_for_turbine)
    rm(vshed_for_turbine)
    gc(verbose=TRUE, full=TRUE)
    # now reclassify to visual exposure
    print("reclassify to visual_exp")
    vshed_visual_exp <-        ifel(dist_for_turbine == 1 & vshed_max_exp == 10,
                               4,
                               ifel(dist_for_turbine == 1 & vshed_max_exp == 20,
                               7,
                               ifel(dist_for_turbine == 1 & vshed_max_exp == 30,
                               10,
                               ifel(dist_for_turbine == 1 & vshed_max_exp == 10,
                               2,
                               ifel(dist_for_turbine == 2 & vshed_max_exp == 20,
                               4,
                               ifel(dist_for_turbine == 2 & vshed_max_exp == 30,
                               6,
                               ifel(dist_for_turbine == 3 & vshed_max_exp == 10,
                               1,
                               ifel(dist_for_turbine == 3 & vshed_max_exp == 20,
                               2,
                               ifel(dist_for_turbine == 3 & vshed_max_exp == 30,
                               4,
                               ifel(dist_for_turbine == 4 & vshed_max_exp == 10,
                               0,
                               ifel(dist_for_turbine == 4 & vshed_max_exp == 20,
                               1,
                               ifel(dist_for_turbine == 4 & vshed_max_exp == 30,
                               2,
                               ifel(dist_for_turbine == 5 & vshed_max_exp == 10,
                               0,
                               ifel(dist_for_turbine == 5 & vshed_max_exp == 20,
                               0,
                               ifel(dist_for_turbine == 5 & vshed_max_exp == 30,
                               1,
                               NA)))))))))))))))
    writeRaster(vshed_visual_exp, 
                paste0("_wip/vshed_visual_exp_", i, ".tif"),
                overwrite=TRUE)
    rm(vshed_max_exp)
    rm(dist_for_turbine)
    rm(vshed_visual_exp)
    gc(verbose=TRUE, full=TRUE)
  }
} 
```

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
#| echo: false
#| message: false
#| warning: false
#| include: false

# sum the visual prominence scores for each turbine
# also reclassify each turbine visual prominence to meaningful visibility
# table 4 in paper and sum those too

# load each turbine's visual prominence raster and sum into an
# overall wind farm visual prominence raster.
# also convert to the meaningful visibility binary matrix shown
#  in table 4 and sum that for the entire windfarm

if (!all(file.exists("_wip/wfarm_vis_prominence.tif", "_wip/wfarm_meaningful_vis.tif"))) {

  for (i in 1:nrow(palings_yard_turbines_untransformed_sf)) {
    if (i == 1) {
      wfarm_vis_prominence <- rast(paste0("_wip/vshed_visual_exp_", i, ".tif"))
      wfarm_meaningful_vis <- ifel(wfarm_vis_prominence == 0, 0, 1)
    } else {
      turbine_vis_prominence <- rast(paste0("_wip/vshed_visual_exp_", i, ".tif"))
      wfarm_vis_prominence <- sum(wfarm_vis_prominence, 
                                  turbine_vis_prominence,
                                  na.rm = TRUE)
      wfarm_meaningful_vis <- sum(wfarm_meaningful_vis,
                                  ifel(wfarm_vis_prominence == 0, 0, 1),
                                  na.rm = TRUE)
      rm(turbine_vis_prominence)
      gc(verbose=TRUE, full=TRUE)
    }
    print(i)
  }

  writeRaster(wfarm_vis_prominence, 
              "_wip/wfarm_vis_prominence.tif",
              overwrite=TRUE)

  writeRaster(wfarm_meaningful_vis, 
              "_wip/wfarm_meaningful_vis.tif",
              overwrite=TRUE)
} else {
  wfarm_vis_prominence <- rast("_wip/wfarm_vis_prominence.tif")
  wfarm_meaningful_vis <- rast("_wip/wfarm_meaningful_vis.tif")
}
```

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
#| echo: false
#| message: false
#| warning: false
#| include: false
# calculate mean visual promnence
# summed visual prominence divided by summed meaningful visibility
wfarm_mean_visual_prominence <- wfarm_vis_prominence / wfarm_meaningful_vis

writeRaster(wfarm_mean_visual_prominence, 
              "_wip/wfarm_mean_visual_prominence.tif",
              overwrite=TRUE)
  
# calculate adjusted windfarm visual prominence using square root and natural log
# multipliers for number of meaningfully visible turbines at each location in the raster

wfarm_sqrt_adj_visual_prominence <- wfarm_mean_visual_prominence * sqrt(wfarm_meaningful_vis)
wfarm_log_adj_visual_prominence <- wfarm_mean_visual_prominence * log(wfarm_meaningful_vis)

writeRaster(wfarm_sqrt_adj_visual_prominence, 
              "_wip/wfarm_sqrt_adj_visual_prominence.tif",
              overwrite=TRUE)
writeRaster(wfarm_log_adj_visual_prominence, 
              "_wip/wfarm_log_adj_visual_prominence.tif",
              overwrite=TRUE)
```

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
#| echo: false
#| message: false
#| warning: false
#| include: false

# Other features
taralga_line <- readLines("assets/taralga_500kVA_line_v2.geojson") %>%
                  paste(collapse = "\n")

pines_expl_area <- sf::read_sf("assets/pines_exploration_area_v15.geojson")

oberon_boundary <- sf::read_sf("assets/nsw-lga-boundaries.geojson") %>%
                      filter(abb_name == "Oberon")

```

Here are the visual impact assessment metrics as described in the paper.

:::{.column-page}

```{r, eval=FALSE}
#| echo: false
#| message: false
#| warning: false

leaflet(height="800px", width="1200px") %>% 
  setView(lng = palings_yard_turbines_untransformed_df[23,1],
          lat = palings_yard_turbines_untransformed_df[23,2],
          zoom = 10) %>%
  addProviderTiles("Esri.WorldShadedRelief", group="Shaded relief") %>%
  addProviderTiles("OpenTopoMap", group="Topography") %>%
  addTiles(group = "OpenStreetMap") %>%
  addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
  addRasterImage(wfarm_sqrt_adj_visual_prominence, 
                 opacity=0.5, 
                 colors = vshed_raster_1_pal,
                  group = "Viewshed for 240m turbine 1",
                  maxBytes = 4 * 8330 * 8801) %>%
  addRasterImage(vshed_raster_2_10m, 
                 opacity=0.5, 
                 colors = vshed_raster_2_pal,
                  group = "Viewshed for 240m turbine 2",
                  maxBytes = 4 * 8330 * 8801) %>%
  addRasterImage(vshed_raster_3_10m, 
                 opacity=0.5, 
                 colors = vshed_raster_3_pal,
                  group = "Viewshed for 240m turbine 3",
                  maxBytes = 4 * 8330 * 8801) %>%
  addCircleMarkers(data = palings_yard_turbines_untransformed_df[c(2,20,45),],
              group = "Three proposed 240m turbines",
              color = "cyan",
              radius = 5,
              stroke = FALSE,
              fillOpacity = 0.5) %>%  
  addLayersControl(baseGroups = c("Imagery", "Shaded relief", "Topography", "OpenStreetMap"),
                   overlayGroups = c( "Three proposed 240m turbines",
                                      "Viewshed for 240m turbine 1",
                                      "Viewshed for 240m turbine 2",
                                      "Viewshed for 240m turbine 3"),
                   options = layersControlOptions(collapsed = FALSE)
  ) %>%
  addMeasure(
            position = "bottomleft",
            primaryLengthUnit = "kilometers",
            primaryAreaUnit = "hectares",
            activeColor = "#3D535D",
            completedColor = "#7D4479",
            localization = "en") %>%
  addScaleBar(position = "bottomright",
  options = scaleBarOptions(metric=TRUE, 
                            imperial=FALSE,
                            maxWidth=300,
                            updateWhenIdle=TRUE))

                    
```

:::

We can examine the distribution of the number of turbines visible from each pixel in the cumulative viewshed raster. Note that zero turbines are visible from the vast majority of pixels -- these have been excluded from the chart below.

```{r, fig.asp=1.25}
#| echo: false
#| message: false
#| warning: false

vshed_number_visible_df <- as.data.frame(vshed_number_visible) %>%
                              mutate(number_visible = factor(viewshed))

vshed_number_visible_df  %>%
  ggplot(aes(x=number_visible)) +
    geom_bar(colour="orange", fill="orange") + 
    coord_flip() +
    labs(x="Number of turbines visible from each pixel in raster",
         y="Number of pixels",
         caption = "Note: Pixels from which no turbines are visible are excluded") +
    theme_minimal()
         
```

The map below shows the cumulative viewshed (with Earth curvature and atmospheric refraction corrections) for all 47 of the proposed Palings Yard wind turbines each 240 metres tall at the indicated positions, shaded by the number of turbines visible from each point on the map.

:::{.column-page}

```{r}
#| echo: false
#| message: false
#| warning: false

leaflet(height="800px", width="1200px") %>% 
  setView(lng = palings_yard_turbines_untransformed_df[20,1],
          lat = palings_yard_turbines_untransformed_df[20,2],
          zoom = 10) %>%
  addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
  addProviderTiles("Esri.WorldShadedRelief", group="Shaded relief") %>%
  addProviderTiles("OpenTopoMap", group="Topography") %>%
  addTiles(group = "OpenStreetMap") %>%
  addRasterImage(vshed_number_visible, 
                 opacity=0.6, 
                 colors = number_visible_pal,
                  group = "Cumulative viewshed for all turbines",
                  maxBytes = 4 * 8330 * 8801) %>%
  addLegend(
    position = "bottomright",
    pal = number_visible_pal,
    values = 1:47,
    labels = palette(),
    title = "Number of turbines visible") %>%  
  addCircleMarkers(data = palings_yard_turbines_untransformed_df,
              group = "Proposed Palings Yard turbines",
              color = "cyan",
              radius = 5,
              stroke = FALSE,
              fillOpacity = 0.5) %>%  
  addPolygons(data=oberon_boundary,
              stroke=TRUE, 
              weight=4, 
              fillOpacity=0.1, 
              color="orange",
              group = "Oberon LGA") %>%
    addGeoJSON(taralga_line, 
             weight=3, 
             color="blue", 
             fillOpacity=0,
             group = "500 kVA transmission line (partial)") %>%
  addLayersControl(baseGroups = c("Imagery", "Shaded relief", "Topography", "OpenStreetMap"),
                   overlayGroups = c( "Oberon LGA",
                                      "500 kVA transmission line (partial)",
                                      "Proposed Palings Yard turbines",
                                      "Cumulative viewshed for all turbines"),
                   options = layersControlOptions(collapsed = FALSE)
  ) %>%
  addMeasure(
            position = "bottomleft",
            primaryLengthUnit = "kilometers",
            primaryAreaUnit = "hectares",
            activeColor = "#3D535D",
            completedColor = "#7D4479",
            localization = "en")
```

:::


:::{.column-page}

```{r, eval=FALSE}
#| echo: false
#| message: false
#| warning: false

leaflet(height="800px", width="1200px") %>% 
  setView(lng = palings_yard_turbines_untransformed_df[20,1],
          lat = palings_yard_turbines_untransformed_df[20,2],
          zoom = 10) %>%
  addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
  addProviderTiles("Esri.WorldShadedRelief", group="Shaded relief") %>%
  addProviderTiles("OpenTopoMap", group="Topography") %>%
  addTiles(group = "OpenStreetMap") %>%
  addRasterImage(vshed_number_visible_1, 
                 opacity=0.6, 
                 colors = "orange",
                 group = "One turbine visible (orange)",
                 maxBytes = 4 * 8330 * 8801) %>%
  addRasterImage(vshed_number_visible_2, 
                 opacity=0.6, 
                 colors = "red",
                 group = "Two turbines visible (red)",
                 maxBytes = 4 * 8330 * 8801) %>%
  addRasterImage(vshed_number_visible_3, 
                 opacity=0.6, 
                 colors = "darkred",
                 group = "Three turbines visible (dark red)",
                 maxBytes = 4 * 8330 * 8801) %>%
  addCircleMarkers(data = palings_yard_turbines_untransformed_df[c(2,20,45),],
              group = "Three proposed 240m turbines",
              color = "cyan",
              radius = 5,
              stroke = FALSE,
              fillOpacity = 0.5) %>%  
  addLayersControl(baseGroups = c( "Topography", "Shaded relief", "Imagery", "OpenStreetMap"),
                   overlayGroups = c( "Three proposed 240m turbines",
                                      "One turbine visible (orange)",
                                      "Two turbines visible (red)",
                                      "Three turbines visible (dark red)"),
                   options = layersControlOptions(collapsed = FALSE)
  ) %>%
  addMeasure(
            position = "bottomleft",
            primaryLengthUnit = "kilometers",
            primaryAreaUnit = "hectares",
            activeColor = "#3D535D",
            completedColor = "#7D4479",
            localization = "en")
```

:::

## Next steps

The next step is to compute viewshed layers for each turbine  for different degrees of exposure of each turbine -- that is, whether only the tips of the upper blade arc can be seen, or the hub, or the entire blade arc. Plus a layer for the distance. Then these layers can be combined using various algorithms as described in [this paper](https://www.sciencedirect.com/science/article/pii/S016920462200072X), to give a visual impact metric for each turbine at each pixel location in the map. Then those can be summed (or aggregated by a function, not necessarily a linear sum) to give an overall visual impact metric for each pixel, which can then be displayed as binned layers on a single map. That's the full extent of what that paper mentioned above describes. That paper seems to be well-regarded and is a good starting point. And then finally drape that overall visual impact metric raster over a 3D rendered map with animated fly-arounds. Weighting of visual impact metrics by population density at each point is also possible to allow an approximate overall human population visual impact score to be created for a given configuration of wind turbines (and variations of that for specific locations or sets of locations). That would then allow the visual impact of different turbine layouts and numbers to be compared and optimised to reduce visual impact to a minimum (subject to other optimisation constraints).
